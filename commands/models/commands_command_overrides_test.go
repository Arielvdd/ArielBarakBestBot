// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCommandsCommandOverrides(t *testing.T) {
	t.Parallel()

	query := CommandsCommandOverrides()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCommandsCommandOverridesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommandsCommandOverridesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CommandsCommandOverrides().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommandsCommandOverridesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CommandsCommandOverrideSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommandsCommandOverridesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CommandsCommandOverrideExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CommandsCommandOverride exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CommandsCommandOverrideExists to return true, but got false.")
	}
}

func testCommandsCommandOverridesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	commandsCommandOverrideFound, err := FindCommandsCommandOverride(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if commandsCommandOverrideFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCommandsCommandOverridesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CommandsCommandOverrides().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCommandsCommandOverridesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CommandsCommandOverrides().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCommandsCommandOverridesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsCommandOverrideOne := &CommandsCommandOverride{}
	commandsCommandOverrideTwo := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, commandsCommandOverrideOne, commandsCommandOverrideDBTypes, false, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}
	if err = randomize.Struct(seed, commandsCommandOverrideTwo, commandsCommandOverrideDBTypes, false, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = commandsCommandOverrideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = commandsCommandOverrideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CommandsCommandOverrides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCommandsCommandOverridesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	commandsCommandOverrideOne := &CommandsCommandOverride{}
	commandsCommandOverrideTwo := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, commandsCommandOverrideOne, commandsCommandOverrideDBTypes, false, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}
	if err = randomize.Struct(seed, commandsCommandOverrideTwo, commandsCommandOverrideDBTypes, false, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = commandsCommandOverrideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = commandsCommandOverrideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCommandsCommandOverridesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommandsCommandOverridesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(commandsCommandOverrideColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommandsCommandOverrideToOneCommandsChannelsOverrideUsingCommandsChannelsOverride(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CommandsCommandOverride
	var foreign CommandsChannelsOverride

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, commandsCommandOverrideDBTypes, false, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, commandsChannelsOverrideDBTypes, false, commandsChannelsOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsOverride struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CommandsChannelsOverridesID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CommandsChannelsOverride().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CommandsCommandOverrideSlice{&local}
	if err = local.L.LoadCommandsChannelsOverride(ctx, tx, false, (*[]*CommandsCommandOverride)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CommandsChannelsOverride == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CommandsChannelsOverride = nil
	if err = local.L.LoadCommandsChannelsOverride(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CommandsChannelsOverride == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCommandsCommandOverrideToOneSetOpCommandsChannelsOverrideUsingCommandsChannelsOverride(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CommandsCommandOverride
	var b, c CommandsChannelsOverride

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, commandsCommandOverrideDBTypes, false, strmangle.SetComplement(commandsCommandOverridePrimaryKeyColumns, commandsCommandOverrideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, commandsChannelsOverrideDBTypes, false, strmangle.SetComplement(commandsChannelsOverridePrimaryKeyColumns, commandsChannelsOverrideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, commandsChannelsOverrideDBTypes, false, strmangle.SetComplement(commandsChannelsOverridePrimaryKeyColumns, commandsChannelsOverrideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CommandsChannelsOverride{&b, &c} {
		err = a.SetCommandsChannelsOverride(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CommandsChannelsOverride != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CommandsCommandOverrides[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CommandsChannelsOverridesID != x.ID {
			t.Error("foreign key was wrong value", a.CommandsChannelsOverridesID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CommandsChannelsOverridesID))
		reflect.Indirect(reflect.ValueOf(&a.CommandsChannelsOverridesID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CommandsChannelsOverridesID != x.ID {
			t.Error("foreign key was wrong value", a.CommandsChannelsOverridesID, x.ID)
		}
	}
}

func testCommandsCommandOverridesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCommandsCommandOverridesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CommandsCommandOverrideSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCommandsCommandOverridesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CommandsCommandOverrides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	commandsCommandOverrideDBTypes = map[string]string{`AutodeleteResponse`: `boolean`, `AutodeleteResponseDelay`: `integer`, `AutodeleteTrigger`: `boolean`, `AutodeleteTriggerDelay`: `integer`, `Commands`: `ARRAYtext`, `CommandsChannelsOverridesID`: `bigint`, `CommandsEnabled`: `boolean`, `GuildID`: `bigint`, `ID`: `bigint`, `IgnoreRoles`: `ARRAYbigint`, `RequireRoles`: `ARRAYbigint`}
	_                              = bytes.MinRead
)

func testCommandsCommandOverridesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(commandsCommandOverridePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(commandsCommandOverrideColumns) == len(commandsCommandOverridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCommandsCommandOverridesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(commandsCommandOverrideColumns) == len(commandsCommandOverridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CommandsCommandOverride{}
	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, commandsCommandOverrideDBTypes, true, commandsCommandOverridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(commandsCommandOverrideColumns, commandsCommandOverridePrimaryKeyColumns) {
		fields = commandsCommandOverrideColumns
	} else {
		fields = strmangle.SetComplement(
			commandsCommandOverrideColumns,
			commandsCommandOverridePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CommandsCommandOverrideSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCommandsCommandOverridesUpsert(t *testing.T) {
	t.Parallel()

	if len(commandsCommandOverrideColumns) == len(commandsCommandOverridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CommandsCommandOverride{}
	if err = randomize.Struct(seed, &o, commandsCommandOverrideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CommandsCommandOverride: %s", err)
	}

	count, err := CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, commandsCommandOverrideDBTypes, false, commandsCommandOverridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommandsCommandOverride struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CommandsCommandOverride: %s", err)
	}

	count, err = CommandsCommandOverrides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
